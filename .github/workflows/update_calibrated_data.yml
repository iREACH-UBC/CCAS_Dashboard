name: Update Calibrated Sensor Data

on:
  workflow_run:        # auto-trigger when “Update Sensor Data” finishes
    workflows: ["Update Sensor Data"]
    types: [completed]
  workflow_dispatch:   # allow manual runs

defaults:
  run:
    shell: bash

# Re-use the same R library path everywhere
env:
  R_LIBS_USER: ${{ github.workspace }}/.Rlib

jobs:
# ────────────────────────────────────────────────────────────
# RAMP  – R script scripts/calibrate_data.R
# ────────────────────────────────────────────────────────────
  calibrate-ramp:
    runs-on: ubuntu-latest
    env:
      RENV_CONFIG_AUTOLOADER_ENABLED: "FALSE"
      RSPM: "https://packagemanager.posit.co/cran/__linux__/focal/latest"
    steps:
      - uses: actions/checkout@v4
        with: { persist-credentials: true }

      - uses: actions/cache@v4           # cache R libs
        with:
          path: ${{ env.R_LIBS_USER }}
          key:  ${{ runner.os }}-r-lib-${{ hashFiles('scripts/calibrate_data.R') }}
          restore-keys: ${{ runner.os }}-r-lib-

      - uses: r-lib/actions/setup-r@v2   # install R

      - name: Install R packages
        run: |
          Rscript -e '
            pkgs <- c(
              "dplyr","readr","lubridate","stringr","purrr","tibble",
              "fs","zoo","openair","glue","randomForest"
            )
            to_install <- setdiff(pkgs, rownames(installed.packages()))
            if (length(to_install))
              install.packages(to_install, repos = Sys.getenv("RSPM"), quiet = TRUE)
          '

      # ---------- added step -------------------------------------------------
      - name: Rebuild stringi from source (avoids ICU mismatch)
        run: |
          Rscript -e '
            if (!requireNamespace("stringi", quietly = TRUE) ||
                !file.exists(system.file("libs", "stringi.so", package = "stringi")))
              install.packages("stringi", type = "source",
                               repos = Sys.getenv("RSPM"), quiet = TRUE)
          '
      # ----------------------------------------------------------------------

      - name: Run RAMP calibration
        run: Rscript scripts/calibrate_data.R

      - name: Commit & push calibrated data (RAMP)
        run: |
          git config --global user.name  "github-actions[bot]"
          git config --global user.email "github-actions@github.com"
          git add calibrated_data/**/*.csv || true
          git commit -m "Automated RAMP calibrated data update at $(date -u)" || echo "No RAMP changes to commit"
          for i in {1..5}; do
            git pull --rebase origin main && git push origin main && break
            sleep 5
          done

# ────────────────────────────────────────────────────────────
# QAQ  – original Python job (unchanged)
# ────────────────────────────────────────────────────────────
  calibrate-qaq:
    runs-on: ubuntu-latest
    needs: calibrate-ramp            # remove if parallel runs are OK

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          persist-credentials: true

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install Python dependencies
        run: |
          pip install pandas pytz

      - name: Run QAQ calibration script
        run: python scripts/calibrate_qaq.py

      - name: Commit & push calibrated data (QAQ)
        run: |
          git config --global user.name  "github-actions[bot]"
          git config --global user.email "github-actions@github.com"
          git add calibrated_data/**/*.csv || true
          git commit -m "Automated QAQ calibrated data update at $(date -u)" || echo "No QAQ changes to commit"
          for i in {1..5}; do
            git pull --rebase origin main && git push origin main && break
            sleep 5
          done
