name: Update Calibrated Sensor Data

on:
  # Re-run automatically when the “Update Sensor Data” workflow finishes
  workflow_run:
    workflows: ["Update Sensor Data"]
    types:     [completed]

  # Manual trigger
  workflow_dispatch:

defaults:
  run:
    shell: bash

# ─── GLOBAL ENV VARS ────────────────────────────────────────────────────────
env:
  R_LIBS_USER:           ${{ github.workspace }}/.Rlib
  RENV_CONFIG_AUTOLOADER_ENABLED: "FALSE"
  RSPM:                  https://packagemanager.posit.co/cran/__linux__/jammy/latest

  AWS_ACCESS_KEY_ID:     ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_ID: ${{ secrets.AWS_SECRET_ACCESS_KEY }}   # adjust if your secret is named differently
  R2_ENDPOINT:           bfde061b9c815bbce1c08766ebac283d.r2.cloudflarestorage.com
# ────────────────────────────────────────────────────────────────────────────


jobs:
# ─────────────────────────── RAMP job (R) ───────────────────────────
  calibrate-ramp:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        sid: [2021, 2022, 2023, 2024, 2026, 2030, 2031]   # ⟵ add / remove IDs here
      fail-fast: false

    steps:
      # 1 ▸ Check out repo (incl. LFS binaries)
      - uses: actions/checkout@v4
        with:
          lfs: true
          persist-credentials: true

      # 2 ▸ Cache R package library
      - uses: actions/cache@v4
        with:
          path: ${{ env.R_LIBS_USER }}
          key:  ${{ runner.os }}-r-lib-${{ hashFiles('scripts/calibrate_data.R') }}
          restore-keys: ${{ runner.os }}-r-lib-

      # 3 ▸ Install R
      - uses: r-lib/actions/setup-r@v2

      # 4 ▸ Install required CRAN packages (only if missing)
      - name: Install R packages
        run: |
          Rscript -e '
            pkgs <- c("dplyr","readr","lubridate","stringr","purrr","tibble",
                      "fs","zoo","openair","glue","randomForest",
                      "caret","gtools","tidyr","aws.s3")
            to_get <- setdiff(pkgs, rownames(installed.packages()))
            if (length(to_get))
              install.packages(to_get, repos = Sys.getenv("RSPM"), quiet = TRUE)
          '

      # 5 ▸ Create a private temp directory for this runner
      - name: Create temp dir
        id: mktemp
        run: echo "TMP_DIR=$(mktemp -d)" >> "$GITHUB_ENV"

      # 6 ▸ Download the CAPS model for this sensor ID
      - name: Pull model for ${{ matrix.sid }}
        env:
          R2_ACCOUNT_ID:  ${{ secrets.R2_ACCOUNT_ID }}
          R2_BUCKET:      outdoor-calibrations
          R2_OBJ_KEY:     ${{ matrix.sid }}/Calibration_Models.obj
          DEST_PATH:      ${{ env.TMP_DIR }}
        run: |
          chmod +x scripts/download_r2_obj.sh
          ./scripts/download_r2_obj.sh            # emits CAL_MODEL_PATH into env

      # 7 ▸ Calibrate the two latest raw files for this sensor
      - name: Calibrate ${{ matrix.sid }}
        run: |
          Rscript scripts/calibrate_data.R "${{ matrix.sid }}"

      # 8 ▸ Commit & push any new / updated CSVs
      - name: Commit & push calibrated data (${{ matrix.sid }})
        run: |
          git config --global user.name  "github-actions[bot]"
          git config --global user.email "github-actions@github.com"
          git add calibrated_data/${{ matrix.sid }}/*.csv || true
          git commit -m "Automated RAMP ${{ matrix.sid }} calibration at $(date -u)" || echo "No changes for sensor ${{ matrix.sid }}"
          for i in {1..5}; do
            git pull --rebase origin main && git push origin main && break
            sleep 5
          done

# ─────────────────────────── QAQ job (Python) ──────────────────────
  calibrate-qaq:
    runs-on: ubuntu-latest
    needs: calibrate-ramp        # wait for all RAMP matrix jobs to finish

    steps:
      - uses: actions/checkout@v4
        with:
          lfs: true
          persist-credentials: true

      - uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install Python dependencies
        run: pip install pandas pytz

      - name: Run QAQ calibration script
        run: python scripts/calibrate_qaq.py

      - name: Commit & push calibrated data (QAQ)
        run: |
          git config --global user.name  "github-actions[bot]"
          git config --global user.email "github-actions@github.com"
          git add calibrated_data/**/*.csv || true
          git commit -m "Automated QAQ calibrated data update at $(date -u)" || echo "No QAQ changes to commit"
          for i in {1..5}; do
            git pull --rebase origin main && git push origin main && break
            sleep 5
          done
