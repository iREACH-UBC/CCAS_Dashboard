name: Update Calibrated Sensor Data

on:
  workflow_run:
    workflows: ["Update Sensor Data"]
    types: [completed]

  workflow_dispatch:

defaults:
  run:
    shell: bash

# ─── GLOBAL ENV VARS ─────────────────────────────────────────────────────
env:
  R_LIBS_USER:           ${{ github.workspace }}/.Rlib
  RENV_CONFIG_AUTOLOADER_ENABLED: "FALSE"
  RSPM:                  https://packagemanager.posit.co/cran/__linux__/jammy/latest

  AWS_ACCESS_KEY_ID:     ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  R2_ENDPOINT:           bfde061b9c815bbce1c08766ebac283d.r2.cloudflarestorage.com
# ─────────────────────────────────────────────────────────────────────────


jobs:
# ───────────────────────── RAMP job (R) ─────────────────────────
  calibrate-ramp:
    runs-on: ubuntu-latest

    steps:
      # 1 Checkout repository + LFS binaries
      - uses: actions/checkout@v4
        with:
          lfs: true
          persist-credentials: true

      # 2 Cache R package library
      - uses: actions/cache@v4
        with:
          path: ${{ env.R_LIBS_USER }}
          key:  ${{ runner.os }}-r-lib-${{ hashFiles('scripts/calibrate_data.R') }}
          restore-keys: ${{ runner.os }}-r-lib-

      # 3 Install R
      - uses: r-lib/actions/setup-r@v2

      # 4 Install required R packages
      - name: Install R packages
        run: |
          Rscript -e '
            pkgs <- c("dplyr","readr","lubridate","stringr","purrr","tibble",
                      "fs","zoo","openair","glue","randomForest",
                      "caret","gtools","tidyr","aws.s3")
            to_get <- setdiff(pkgs, rownames(installed.packages()))
            if (length(to_get))
              install.packages(to_get, repos = Sys.getenv("RSPM"), quiet = TRUE)
          '

      # 🔍 5 Quick probe to confirm R2 connectivity
      - name: Probe R2 connection
        run: |
          Rscript - <<'RS'
            library(aws.s3); library(httr)
            host   <- sub("^https?://", "", Sys.getenv("R2_ENDPOINT"))
            bucket <- "outdoor-calibrations"
            key    <- "2021/Calibration_Models.obj"

            cat("Host: ", host, "\n")
            cat("Key prefix: ", substr(Sys.getenv("AWS_ACCESS_KEY_ID"), 1, 4), "****\n\n")

            tryCatch({
              cat("-- get_bucket() listing 2021/ --\n")
              print(aws.s3::get_bucket(bucket=bucket, prefix="2021/", base_url=host, region="auto"))
            }, error = function(e) {print(e)})

            cat("\n-- head_object() --\n")
            print(tryCatch(
              aws.s3::head_object(object=key, bucket=bucket, base_url=host, region="auto"),
              error = function(e) e))

            cat("\n-- unsigned raw GET (should fail) --\n")
            r <- GET(sprintf("https://%s/%s/%s", host, bucket, key))
            cat("HTTP status:", status_code(r), "\n")
            cat("First 80 bytes: ", rawToChar(content(r, 'raw')[1:80]), "\n")
          RS

      # 6 Run calibration script
      - name: Run RAMP calibration
        run: Rscript scripts/calibrate_data.R

      # 7 Commit & push updated CSVs
      - name: Commit & push calibrated data (RAMP)
        run: |
          git config --global user.name  "github-actions[bot]"
          git config --global user.email "github-actions@github.com"
          git add calibrated_data/**/*.csv || true
          git commit -m "Automated RAMP calibrated data update at $(date -u)" || echo "No RAMP changes to commit"
          for i in {1..5}; do
            git pull --rebase origin main && git push origin main && break
            sleep 5
          done

# ───────────────────────── QAQ job (Python) ─────────────────────
  calibrate-qaq:
    runs-on: ubuntu-latest
    needs: calibrate-ramp

    steps:
      - uses: actions/checkout@v4
        with:
          lfs: true
          persist-credentials: true

      - uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install Python dependencies
        run: pip install pandas pytz

      - name: Run QAQ calibration script
        run: python scripts/calibrate_qaq.py

      - name: Commit & push calibrated data (QAQ)
        run: |
          git config --global user.name  "github-actions[bot]"
          git config --global user.email "github-actions@github.com"
          git add calibrated_data/**/*.csv || true
          git commit -m "Automated QAQ calibrated data update at $(date -u)" || echo "No QAQ changes to commit"
          for i in {1..5}; do
            git pull --rebase origin main && git push origin main && break
            sleep 5
          done
