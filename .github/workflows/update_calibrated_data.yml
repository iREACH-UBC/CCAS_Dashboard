name: Update Calibrated Sensor Data

on:
  # Trigger automatically when the raw-data workflow completes
  workflow_run:
    workflows: ["Update Sensor Data"]
    types:     [completed]

  # Manual trigger
  workflow_dispatch:

defaults:
  run:
    shell: bash

# ─── GLOBAL ENV VARS ───────────────────────────────────────
# Map your existing secret `AWS_SECRET_ACCESS_ID` into the
# variable name the AWS CLI expects: AWS_SECRET_ACCESS_KEY
env:
  R_LIBS_USER: ${{ github.workspace }}/.Rlib
  RENV_CONFIG_AUTOLOADER_ENABLED: "FALSE"
  RSPM: https://packagemanager.posit.co/cran/__linux__/jammy/latest

  AWS_ACCESS_KEY_ID:     ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_ID }}   # ← fixed mapping
  R2_ENDPOINT: bfde061b9c815bbce1c08766ebac283d.r2.cloudflarestorage.com
# ───────────────────────────────────────────────────────────

################################################################
#                           RAMP JOB                           #
################################################################
jobs:
  calibrate-ramp:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        sid: [2021, 2022, 2023, 2024, 2026, 2030, 2031]
      fail-fast: false

    steps:
    # 1 ▸ Checkout repository (incl. LFS)
    - uses: actions/checkout@v4
      with:
        lfs: true
        persist-credentials: true

    # 2 ▸ Cache R library
    - uses: actions/cache@v4
      with:
        path: ${{ env.R_LIBS_USER }}
        key:  ${{ runner.os }}-r-lib-${{ hashFiles('scripts/calibrate_data.R') }}
        restore-keys: ${{ runner.os }}-r-lib-

    # 3 ▸ Set up R
    - uses: r-lib/actions/setup-r@v2

    # 4 ▸ Install CRAN packages (if renv not used)
    - name: Install R packages
      run: |
        Rscript -e '
          pkgs <- c("dplyr","readr","lubridate","stringr","purrr","tibble",
                    "fs","zoo","openair","glue","randomForest","caret",
                    "gtools","tidyr","aws.s3")
          to_get <- setdiff(pkgs, rownames(installed.packages()))
          if (length(to_get))
            install.packages(to_get, repos = Sys.getenv("RSPM"), quiet = TRUE)
        '

    # 5 ▸ Temp directory for model download
    - name: Create temp dir
      id: mktemp
      run: echo "TMP_DIR=$(mktemp -d)" >> "$GITHUB_ENV"

    # 6 ▸ Download model for current sensor
    - name: Pull model for ${{ matrix.sid }}
      env:
        R2_ACCOUNT_ID:  ${{ secrets.R2_ACCOUNT_ID }}
        R2_BUCKET:      outdoor-calibrations
        R2_OBJ_KEY:     ${{ matrix.sid }}/Calibration_Models.obj
        DEST_PATH:      ${{ env.TMP_DIR }}
      run: |
        chmod +x scripts/download_r2_obj.sh
        ./scripts/download_r2_obj.sh    # sets CAL_MODEL_PATH env var

    # 7 ▸ Calibrate
    - name: Calibrate sensor ${{ matrix.sid }}
      run: Rscript scripts/calibrate_data.R "${{ matrix.sid }}"

    # 8 ▸ Commit & push (sentinel guarantees diff)
    - name: Commit & push calibrated data (${{ matrix.sid }})
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        set -euo pipefail
        git config --global user.name  "github-actions[bot]"
        git config --global user.email "github-actions@github.com"

        git add calibrated_data/${{ matrix.sid }}/
        git commit -m "Automated RAMP ${{ matrix.sid }} calibration at $(date -u +'%Y-%m-%dT%H:%M:%SZ')" \
          || echo "Nothing to commit (unexpected)"

        for i in {1..5}; do
          git pull --rebase --autostash origin main || true
          if git push origin HEAD:main --force-with-lease; then
            echo "Push succeeded (attempt $i)"; break
          fi
          echo "Push failed – retrying ($i/5)"; sleep 5
        done

################################################################
#                           QAQ JOB                            #
################################################################
  calibrate-qaq:
    runs-on: ubuntu-latest
    needs: calibrate-ramp

    steps:
    - uses: actions/checkout@v4
      with:
        lfs: true
        persist-credentials: true

    - uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install Python deps
      run: pip install pandas pytz boto3

    - name: Run QAQ calibration script
      run: python scripts/calibrate_qaq.py

    - name: Commit & push calibrated data (QAQ)
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        git config --global user.name  "github-actions[bot]"
        git config --global user.email "github-actions@github.com"

        git add calibrated_data/
        git commit -m "Automated QAQ calibration at $(date -u +'%Y-%m-%dT%H:%M:%SZ')" \
          || echo "Nothing to commit (unexpected)"

        for i in {1..5}; do
          git pull --rebase --autostash origin main || true
          if git push origin HEAD:main --force-with-lease; then
            echo "Push succeeded (attempt $i)"; break
          fi
          echo "Push failed – retrying ($i/5)"; sleep 5
        done
