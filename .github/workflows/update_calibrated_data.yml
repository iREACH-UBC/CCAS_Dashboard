name: Update Calibrated Sensor Data

on:
  workflow_run:
    workflows: ["Update Sensor Data"]
    types: [completed]
  workflow_dispatch:

defaults:
  run:
    shell: bash

env:
  R_LIBS_USER: ${{ github.workspace }}/.Rlib
  RENV_CONFIG_AUTOLOADER_ENABLED: "FALSE"
  RSPM: "https://packagemanager.posit.co/cran/__linux__/focal/latest"

jobs:
# ────────────────────────────── RAMP ──────────────────────────────
  calibrate-ramp:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: true

      - uses: actions/cache@v4
        with:
          path: ${{ env.R_LIBS_USER }}
          key:  ${{ runner.os }}-r-lib-${{ hashFiles('scripts/calibrate_data.R') }}
          restore-keys: ${{ runner.os }}-r-lib-

      - uses: r-lib/actions/setup-r@v2

      # -------- install packages in a safe order ----------------------------
      - name: Install R packages (safe order)
        run: |
          set -e
          # helper for binary installs
          install_bin () {
            Rscript -e "pkgs <- commandArgs(TRUE); \
              inst <- setdiff(pkgs, rownames(installed.packages())); \
              if (length(inst)) \
                install.packages(inst, repos = Sys.getenv('RSPM'), quiet = TRUE)" "$@"
          }

          # 0) nuke any cached binary stringi
          rm -rf "$R_LIBS_USER/stringi"

          # 1) build stringi from source (provides good ICU)
          Rscript -e 'install.packages("stringi", type = "source", repos = Sys.getenv("RSPM"), quiet = TRUE)'

          # 2) binaries for everything except terra/raster/stringr/stringi
          install_bin dplyr readr lubridate purrr tibble fs zoo openair glue randomForest

          # 3) build heavy pkgs from source (self-contained)
          export MAKEFLAGS="-j2"
          Rscript -e 'install.packages(c("terra","raster"), type = "source", repos = Sys.getenv("RSPM"), quiet = TRUE)'

          # 4) build stringr from source (links against good stringi, no binary pulled)
          Rscript -e 'install.packages("stringr", type = "source", repos = Sys.getenv("RSPM"), quiet = TRUE)'

      # run calibration (wd = scripts/)
      - name: Run RAMP calibration
        run: |
          cd scripts
          Rscript calibrate_data.R

      - name: Commit & push calibrated data (RAMP)
        run: |
          git config --global user.name  "github-actions[bot]"
          git config --global user.email "github-actions@github.com"
          git add calibrated_data/**/*.csv || true
          git commit -m "Automated RAMP calibrated data update at $(date -u)" || echo "No RAMP changes to commit"
          for i in {1..5}; do
            git pull --rebase origin main && git push origin main && break
            sleep 5
          done

# ────────────────────────────── QAQ (unchanged) ─────────────────────────────
  calibrate-qaq:
    runs-on: ubuntu-latest
    needs: calibrate-ramp

    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: true

      - uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install Python dependencies
        run: pip install pandas pytz

      - name: Run QAQ calibration script
        run: python scripts/calibrate_qaq.py

      - name: Commit & push calibrated data (QAQ)
        run: |
          git config --global user.name  "github-actions[bot]"
          git config --global user.email "github-actions@github.com"
          git add calibrated_data/**/*.csv || true
          git commit -m "Automated QAQ calibrated data update at $(date -u)" || echo "No QAQ changes to commit"
          for i in {1..5}; do
            git pull --rebase origin main && git push origin main && break
            sleep 5
          done
